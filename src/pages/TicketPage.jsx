import React, { useState, useEffect, useContext } from 'react';
import '../styles/TicketPage.css';
import { UserContext } from '../UserContext';
import TicketCreateModal from '../components/TicketCreateModal';
import TicketEditModal from '../components/TicketEditModal';
import Header from '../components/Header';

const pricingData = {
    'X√°c minh quy·ªÅn th·ª´a k·∫ø': 1200000,
    'X√°c minh quan h·ªá huy·∫øt th·ªëng': 1500000,
    'Gi√°m ƒë·ªãnh ADN cho con nu√¥i': 1000000,
    'X√°c minh danh t√≠nh': 1300000,
    'X√°c minh quy·ªÅn l·ª£i b·∫£o hi·ªÉm': 1600000,
    'X√°c minh quy·ªÅn th·ª´a k·∫ø trong di ch√∫c': 1700000,
    'Kh√°c': 1900000,
};

const TicketPage = () => {
    const [category, setCategory] = useState('');
    const [service, setService] = useState('');
    const [customReason, setCustomReason] = useState('');
    const [method, setMethod] = useState('');
    const [address, setAddress] = useState('');
    const [phone, setPhone] = useState('');
    const [email, setEmail] = useState('');
    const [sample1Name, setSample1Name] = useState('');
    const [sample2Name, setSample2Name] = useState('');
    const [appointmentDate, setAppointmentDate] = useState('');
    const [loading, setLoading] = useState(false);
    const [userId, setUserId] = useState(null);
    const [price, setPrice] = useState(0);
    const [userInfo, setUserInfo] = useState({
        address: '',
        phone: '',
        email: '',
    });
    const { wallet, updateFullName, updateWallet } = useContext(UserContext);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [confirmAmount, setConfirmAmount] = useState(0);
    const [confirmResolve, setConfirmResolve] = useState(null);
    const [showSuccessModal, setShowSuccessModal] = useState(false);
    const [showErrorModal, setShowErrorModal] = useState(false);
    const [errorMsg, setErrorMsg] = useState('');
    const [voucherCode, setVoucherCode] = useState('');
    const [voucherInfo, setVoucherInfo] = useState(null);
    const [discount, setDiscount] = useState(0);

    const civilServices = [
        'X√°c minh quy·ªÅn th·ª´a k·∫ø',
        'X√°c minh quan h·ªá huy·∫øt th·ªëng',
        'Gi√°m ƒë·ªãnh ADN cho con nu√¥i',
    ];

    const adminServices = [
        'X√°c minh danh t√≠nh',
        'X√°c minh quy·ªÅn l·ª£i b·∫£o hi·ªÉm',
        'X√°c minh quy·ªÅn th·ª´a k·∫ø trong di ch√∫c',
    ];

    useEffect(() => {
        const fetchUserInfo = async () => {
            try {
                const res = await fetch('/auth/me', {
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem('token')}`,
                    },
                });
                if (res.ok) {
                    const user = await res.json();
                    setUserId(user.userId || user.id || null);
                    setUserInfo({
                        address: user.address || '',
                        phone: user.phone || '',
                        email: user.email || '',
                    });
                } else {
                    console.error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.');
                }
            } catch (err) {
                console.error('L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
            }
        };
        fetchUserInfo();
    }, []);

    useEffect(() => {
        if (method === 'T·ª± g·ª≠i m·∫´u') {
            setAddress(userInfo.address);
            setPhone(userInfo.phone);
            setEmail(userInfo.email);
        } else {
            setAddress('');
            setPhone('');
            setEmail('');
        }
    }, [method, userInfo]);

    useEffect(() => {
        let calculated = 0;
        if (category === 'Kh√°c') {
            calculated = pricingData['Kh√°c'];
        } else if (service && pricingData[service]) {
            calculated = pricingData[service];
        }
        setPrice(calculated);
    }, [category, service]);

    useEffect(() => {
        if (!voucherCode || price === 0) {
            setVoucherInfo(null);
            setDiscount(0);
            return;
        }
        fetch(`/api/vouchers/check?code=${voucherCode}`, {
            headers: {
                Authorization: `Bearer ${localStorage.getItem('token')}`
            }
        })
            .then(res => res.ok ? res.json() : null)
            .then(data => {
                if (!data) {
                    setVoucherInfo(null);
                    setDiscount(0);
                    return;
                }
                setVoucherInfo(data);
                let d = 0;
                if (data.type === 'percent') {
                    d = Math.round(price * data.value / 100);
                } else if (data.type === 'amount') {
                    d = Math.min(price, data.value);
                }
                setDiscount(d);
            })
            .catch(() => {
                setVoucherInfo(null);
                setDiscount(0);
            });
    }, [voucherCode, price]);

    const showConfirm = (amount) => {
        return new Promise((resolve) => {
            setConfirmAmount(amount);
            setShowConfirmModal(true);
            setConfirmResolve(() => resolve);
        });
    };

    const handleConfirm = () => {
        setShowConfirmModal(false);
        if (confirmResolve) confirmResolve(true);
    };
    const handleCancel = () => {
        setShowConfirmModal(false);
        if (confirmResolve) confirmResolve('cancel');
    };

    const payFunction = async (amount) => {
        return await showConfirm(amount);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!userId) {
            setErrorMsg('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            setShowErrorModal(true);
            setLoading(false);
            return;
        }

        if (method === 'T·∫°i c∆° s·ªü y t·∫ø' && appointmentDate) {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const appointmentDateObj = new Date(appointmentDate);
            
            if (appointmentDateObj < today) {
                setErrorMsg('‚ùå Ng√†y h·∫πn kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n ng√†y hi·ªán t·∫°i! Vui l√≤ng ch·ªçn ng√†y h·∫πn t·ª´ h√¥m nay tr·ªü ƒëi.');
                setShowErrorModal(true);
                setLoading(false);
                return;
            }
        }

        if (wallet < price - discount) {
            setErrorMsg('‚ùå S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n!');
            setShowErrorModal(true);
            setLoading(false);
            return;
        }

        setLoading(true);

        const typeMap = {
            'D√¢n s·ª±': 'CIVIL',
            'H√†nh ch√≠nh': 'ADMINISTRATIVE',
            'Kh√°c': 'OTHER',
        };

        const methodMap = {
            'T·ª± g·ª≠i m·∫´u': 'SELF_TEST',
            'T·∫°i c∆° s·ªü y t·∫ø': 'AT_FACILITY',
        };

        const ticketData = {
            type: typeMap[category],
            method: methodMap[method],
            reason: service || customReason,
            customerId: userId,
            amount: price,
            address: method === 'T·ª± g·ª≠i m·∫´u' ? address : undefined,
            phone: method === 'T·ª± g·ª≠i m·∫´u' ? phone : undefined,
            email: method === 'T·ª± g·ª≠i m·∫´u' ? email : undefined,
            sample1Name: sample1Name,
            sample2Name: sample2Name,
            status: (typeMap[category] === 'CIVIL' && methodMap[method] === 'SELF_TEST') ? 'CONFIRMED' : 'PENDING',
            ...(voucherCode ? { voucherCode } : {})
        };

        // Debug log ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆∞·ª£c g·ª≠i
        console.log('=== DEBUG TICKET CREATION ===');
        console.log('Category:', category);
        console.log('Method:', method);
        console.log('TypeMap[category]:', typeMap[category]);
        console.log('MethodMap[method]:', methodMap[method]);
        console.log('Is CIVIL SELF_TEST:', typeMap[category] === 'CIVIL' && methodMap[method] === 'SELF_TEST');
        console.log('Expected status:', (typeMap[category] === 'CIVIL' && methodMap[method] === 'SELF_TEST') ? 'CONFIRMED' : 'PENDING');
        console.log('Ticket data being sent:', ticketData);
        console.log('=== END DEBUG ===');

        try {
            const paymentSuccess = await payFunction(price - discount);
            if (paymentSuccess === 'cancel') {
                setLoading(false);
                return;
            }
            if (!paymentSuccess) {
                alert('‚ùå Thanh to√°n th·∫•t b·∫°i. Kh√¥ng t·∫°o ticket.');
                setLoading(false);
                return;
            }

            const res = await fetch('/tickets/after-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(ticketData),
            });

            if (res.ok) {
                const ticket = await res.json();
                const history = JSON.parse(localStorage.getItem('ticketHistory')) || [];
                history.push(ticket.id);
                localStorage.setItem('ticketHistory', JSON.stringify(history));
                
                // Remove alert for CIVIL SELF_TEST and normal ticket creation
                // if (typeMap[category] === 'CIVIL' && methodMap[method] === 'SELF_TEST') {
                //     alert(`‚úÖ T·∫°o ticket th√†nh c√¥ng!\n\nüì¶ Ticket D√¢n s·ª± + T·ª± g·ª≠i m·∫´u\n\nQuy tr√¨nh m·ªõi:\n1. Kit s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n\n2. B·∫°n x√°c nh·∫≠n nh·∫≠n kit\n3. B·∫°n thu th·∫≠p m·∫´u v√† g·ª≠i v·ªÅ\n4. Staff x·ª≠ l√Ω v√† tr·∫£ k·∫øt qu·∫£\n\nVui l√≤ng ki·ªÉm tra tr·∫°ng th√°i trong "L·ªãch s·ª≠ x√©t nghi·ªám"`);
                // } else {
                //     alert('‚úÖ T·∫°o ticket th√†nh c√¥ng!');
                // }
                
                try {
                    const resUser = await fetch('/auth/me', {
                        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
                    });
                    if (resUser.ok) {
                        const user = await resUser.json();
                        updateFullName(user.fullName);
                        updateWallet(user.walletBalance);
                    }
                } catch {}
                setShowSuccessModal(true);
                resetForm();
            } else {
                const errText = await res.text();
                console.error('=== TICKET CREATION ERROR ===');
                console.error('Response status:', res.status);
                console.error('Response status text:', res.statusText);
                console.error('Response headers:', Object.fromEntries(res.headers.entries()));
                console.error('Error response body:', errText);
                console.error('Request data sent:', ticketData);
                console.error('=== END ERROR DEBUG ===');
                
                let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                try {
                    const errorData = JSON.parse(errText);
                    errorMessage = errorData.message || errorData.error || errText || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                } catch (e) {
                    errorMessage = errText || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                }
                
                setErrorMsg(`‚ùå T·∫°o ticket th·∫•t b·∫°i:\n\n${errorMessage}\n\nüìã Chi ti·∫øt:\n- Status: ${res.status}\n- Type: ${ticketData.type}\n- Method: ${ticketData.method}\n- Status: ${ticketData.status}`);
                setShowErrorModal(true);
            }
        } catch (err) {
            console.error('=== NETWORK ERROR ===');
            console.error('Error type:', err.name);
            console.error('Error message:', err.message);
            console.error('Error stack:', err.stack);
            console.error('Request data that failed:', ticketData);
            console.error('=== END NETWORK ERROR ===');
            
            setErrorMsg(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß:\n\n${err.message}\n\nüìã Chi ti·∫øt:\n- Error type: ${err.name}\n- Type: ${ticketData.type}\n- Method: ${ticketData.method}\n- Status: ${ticketData.status}`);
            setShowErrorModal(true);
        } finally {
            setLoading(false);
        }
    };

    const resetForm = () => {
        setCategory('');
        setService('');
        setCustomReason('');
        setMethod('');
        setAddress('');
        setPhone('');
        setEmail('');
        setSample1Name('');
        setSample2Name('');
        setAppointmentDate('');
        setPrice(0);
        setVoucherCode('');
        setVoucherInfo(null);
        setDiscount(0);
    };

    return (
        <>
            <Header />
            <div className="ticket-page">
                <div className="ticket-form-container">
                    <h2 className="ticket-title">T·∫°o ƒê∆°n Y√™u C·∫ßu X√©t Nghi·ªám</h2>
                    <form onSubmit={handleSubmit} className="ticket-form" autoComplete="off">
                        <div className="form-group">
                            <label htmlFor="category">Ch·ªçn lo·∫°i y√™u c·∫ßu:</label>
                            <select
                                id="category"
                                value={category}
                                onChange={(e) => {
                                    setCategory(e.target.value);
                                    setService('');
                                    setCustomReason('');
                                }}
                                required
                            >
                                <option value="">-- Ch·ªçn --</option>
                                <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                                <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                                <option value="Kh√°c">Y√™u c·∫ßu kh√°c</option>
                            </select>
                        </div>

                        {(category === 'D√¢n s·ª±' || category === 'H√†nh ch√≠nh') && (
                            <div className="form-group">
                                <label htmlFor="service">Ch·ªçn d·ªãch v·ª•:</label>
                                <select
                                    id="service"
                                    value={service}
                                    onChange={(e) => setService(e.target.value)}
                                    required
                                >
                                    <option value="">-- Ch·ªçn d·ªãch v·ª• --</option>
                                    {(category === 'D√¢n s·ª±' ? civilServices : adminServices).map((srv, idx) => (
                                        <option key={idx} value={srv}>{srv}</option>
                                    ))}
                                </select>
                            </div>
                        )}

                        {category === 'Kh√°c' && (
                            <div className="form-group">
                                <label htmlFor="customReason">L√Ω do c·∫ßn x√©t nghi·ªám:</label>
                                <textarea
                                    id="customReason"
                                    value={customReason}
                                    onChange={(e) => setCustomReason(e.target.value)}
                                    rows="4"
                                    placeholder="Nh·∫≠p l√Ω do..."
                                    required
                                />
                            </div>
                        )}

                        <div className="form-group">
                            <label htmlFor="method">Ch·ªçn ph∆∞∆°ng th·ª©c l·∫•y m·∫´u:</label>
                            <select
                                id="method"
                                value={method}
                                onChange={(e) => setMethod(e.target.value)}
                                required
                            >
                                <option value="">-- Ch·ªçn ph∆∞∆°ng th·ª©c --</option>
                                <option value="T·ª± g·ª≠i m·∫´u">T·ª± g·ª≠i m·∫´u</option>
                                <option value="T·∫°i c∆° s·ªü y t·∫ø">T·∫°i c∆° s·ªü y t·∫ø</option>
                            </select>
                        </div>

                        {method === 'T·ª± g·ª≠i m·∫´u' && (
                            <div className="method-details">
                                <div className="form-group">
                                    <label htmlFor="address"><strong>ƒê·ªãa ch·ªâ nh·∫≠n m·∫´u:</strong></label>
                                    <input
                                        id="address"
                                        type="text"
                                        value={address}
                                        onChange={(e) => setAddress(e.target.value)}
                                        placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n m·∫´u"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label htmlFor="phone"><strong>S·ªë ƒëi·ªán tho·∫°i:</strong></label>
                                    <input
                                        id="phone"
                                        type="tel"
                                        value={phone}
                                        onChange={(e) => setPhone(e.target.value)}
                                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                        required
                                    />
                                </div>
                                <div className="form-group">
                                    <label htmlFor="email"><strong>Email:</strong></label>
                                    <input
                                        id="email"
                                        type="email"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        placeholder="Nh·∫≠p email"
                                        required
                                    />
                                </div>
                            </div>
                        )}

                        {method === 'T·∫°i c∆° s·ªü y t·∫ø' && (
                            <div className="form-group">
                                <label htmlFor="appointmentDate"><strong>Ch·ªçn ng√†y h·∫πn:</strong></label>
                                <input
                                    id="appointmentDate"
                                    type="date"
                                    value={appointmentDate}
                                    onChange={(e) => setAppointmentDate(e.target.value)}
                                    min={new Date().toISOString().split('T')[0]}
                                    required
                                    className="date-picker"
                                />
                                <small style={{ color: '#666', fontSize: '12px', marginTop: '4px', display: 'block' }}>
                                    ‚ö†Ô∏è Ng√†y h·∫πn ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi
                                </small>
                            </div>
                        )}

                        <div className="form-group">
                            <label htmlFor="sample1Name"><strong>T√™n M·∫´u 1:</strong></label>
                            <input
                                id="sample1Name"
                                type="text"
                                value={sample1Name}
                                onChange={(e) => setSample1Name(e.target.value)}
                                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi cung c·∫•p m·∫´u 1"
                                required
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="sample2Name"><strong>T√™n M·∫´u 2:</strong></label>
                            <input
                                id="sample2Name"
                                type="text"
                                value={sample2Name}
                                onChange={(e) => setSample2Name(e.target.value)}
                                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi cung c·∫•p m·∫´u 2"
                                required
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="voucherCode">M√£ voucher (n·∫øu c√≥):</label>
                            <input
                                id="voucherCode"
                                type="text"
                                value={voucherCode}
                                onChange={e => setVoucherCode(e.target.value)}
                                placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
                            />
                            {voucherInfo && (
                                <div style={{ color: '#2979ff', fontSize: 14, marginTop: 4 }}>
                                    √Åp d·ª•ng: {voucherInfo.type === 'percent' ? `${voucherInfo.value}%` : `${voucherInfo.value.toLocaleString()} VNƒê`}<br/>
                                    Hi·ªáu l·ª±c: {new Date(voucherInfo.start).toLocaleString()} - {new Date(voucherInfo.end).toLocaleString()}
                                </div>
                            )}
                            {voucherCode && !voucherInfo && (
                                <div style={{ color: '#f44336', fontSize: 14, marginTop: 4 }}>Voucher kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n</div>
                            )}
                        </div>

                        <div className="price-display">
                            Gi√° d·ªãch v·ª•: {price > 0 ? price.toLocaleString('vi-VN') + ' VNƒê' : '--'}<br/>
                            {discount > 0 && (
                                <span style={{ color: '#2979ff' }}>Gi·∫£m gi√°: -{discount.toLocaleString('vi-VN')} VNƒê</span>
                            )}<br/>
                            <b>S·ªë ti·ªÅn c·∫ßn tr·∫£: {(price - discount > 0 ? (price - discount).toLocaleString('vi-VN') : 0) + ' VNƒê'}</b>
                        </div>

                        <button className="submit-btn" type="submit" disabled={loading}>
                            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫°o y√™u c·∫ßu'}
                        </button>
                    </form>
                </div>
            </div>
            
            {/* Footer with Map */}
            <footer className="member-footer">
                <div className="member-footer-content">
                    <div className="member-footer-info">
                        <div><strong>S·ªë Hotline:</strong> 1800.9999</div>
                        <div><strong>Email:</strong> trungtamxetnghiem@gmail.com</div>
                        <div><strong>ƒê·ªãa ch·ªâ:</strong> 643 ƒêi·ªán Bi√™n Ph·ªß, Ph∆∞·ªùng 1, Qu·∫≠n 3, TPHCM</div>
                    </div>
                    <div className="member-footer-map">
                        <iframe
                            title="B·∫£n ƒë·ªì Trung t√¢m x√©t nghi·ªám ADN"
                            src="https://www.google.com/maps?q=643+ƒêi·ªán+Bi√™n+Ph·ªß,+Ph∆∞·ªùng+1,+Qu·∫≠n+3,+TPHCM&output=embed"
                            width="250"
                            height="140"
                            style={{ border: 0, borderRadius: 10 }}
                            allowFullScreen=""
                            loading="lazy"
                            referrerPolicy="no-referrer-when-downgrade"
                        ></iframe>
                    </div>
                </div>
            </footer>
            
            {showConfirmModal && (
                <div style={{
                    position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',
                    background: 'rgba(0,0,0,0.35)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 2000
                }}>
                    <div style={{
                        background: '#fff', borderRadius: 16, padding: 36, minWidth: 320, maxWidth: 380,
                        boxShadow: '0 4px 32px rgba(30,58,138,0.18)', textAlign: 'center', position: 'relative'
                    }}>
                        <div style={{ marginBottom: 18 }}>
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" style={{marginBottom: 8}}>
                                <rect x="4" y="12" width="40" height="24" rx="8" fill="#e0f2fe"/>
                                <rect x="4" y="12" width="40" height="24" rx="8" stroke="#22c55e" strokeWidth="2"/>
                                <circle cx="24" cy="24" r="6" fill="#fff" stroke="#22c55e" strokeWidth="2"/>
                                <text x="24" y="28" textAnchor="middle" fontSize="12" fontWeight="bold" fill="#22c55e">‚Ç´</text>
                            </svg>
                        </div>
                        <div style={{ fontSize: 18, marginBottom: 18 }}>
                            X√°c nh·∫≠n thanh to√°n <b style={{ fontSize: 22 }}>{confirmAmount.toLocaleString('vi-VN')}</b> VNƒê?
                        </div>
                        <div style={{ display: 'flex', justifyContent: 'center', gap: 16 }}>
                            <button
                                onClick={handleConfirm}
                                style={{
                                    background: '#22c55e', color: '#fff', border: 'none', borderRadius: 8,
                                    padding: '10px 28px', fontWeight: 700, fontSize: 16, cursor: 'pointer',
                                    boxShadow: '0 2px 8px rgba(34,197,94,0.10)', transition: 'background 0.2s',
                                }}
                                onMouseOver={e => e.currentTarget.style.background = '#16a34a'}
                                onMouseOut={e => e.currentTarget.style.background = '#22c55e'}
                            >X√°c nh·∫≠n</button>
                            <button
                                onClick={handleCancel}
                                style={{
                                    background: '#f3f4f6', color: '#374151', border: 'none', borderRadius: 8,
                                    padding: '10px 28px', fontWeight: 600, fontSize: 16, cursor: 'pointer',
                                    boxShadow: '0 2px 8px rgba(30,58,138,0.06)', transition: 'background 0.2s',
                                }}
                                onMouseOver={e => e.currentTarget.style.background = '#e5e7eb'}
                                onMouseOut={e => e.currentTarget.style.background = '#f3f4f6'}
                            >Hu·ª∑</button>
                        </div>
                    </div>
                </div>
            )}
            {showSuccessModal && (
                <div style={{
                    position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',
                    background: 'rgba(0,0,0,0.35)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 2000
                }}>
                    <div style={{
                        background: '#fff', borderRadius: 16, padding: 36, minWidth: 320, maxWidth: 380,
                        boxShadow: '0 4px 32px rgba(30,58,138,0.18)', textAlign: 'center', position: 'relative'
                    }}>
                        <div style={{ marginBottom: 18 }}>
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" style={{marginBottom: 8}}>
                                <circle cx="24" cy="24" r="20" fill="#e8f5e8"/>
                                <path d="M20 24l4 4 8-8" stroke="#22c55e" strokeWidth="3" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                        </div>
                        <div style={{ fontSize: 18, marginBottom: 18 }}>
                            ‚úÖ Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!
                        </div>
                        <div style={{ fontSize: 14, color: '#666', marginBottom: 24 }}>
                            Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.
                        </div>
                        <button
                            onClick={() => {
                                setShowSuccessModal(false);
                                resetForm();
                            }}
                            style={{
                                background: '#22c55e', color: '#fff', border: 'none', borderRadius: 8,
                                padding: '10px 28px', fontWeight: 700, fontSize: 16, cursor: 'pointer',
                                boxShadow: '0 2px 8px rgba(34,197,94,0.10)', transition: 'background 0.2s',
                            }}
                            onMouseOver={e => e.currentTarget.style.background = '#16a34a'}
                            onMouseOut={e => e.currentTarget.style.background = '#22c55e'}
                        >ƒê√≥ng</button>
                    </div>
                </div>
            )}
            {showErrorModal && (
                <div style={{
                    position: 'fixed', top: 0, left: 0, width: '100vw', height: '100vh',
                    background: 'rgba(0,0,0,0.35)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 2000
                }}>
                    <div style={{
                        background: '#fff', borderRadius: 16, padding: 36, minWidth: 320, maxWidth: 380,
                        boxShadow: '0 4px 32px rgba(30,58,138,0.18)', textAlign: 'center', position: 'relative'
                    }}>
                        <div style={{ marginBottom: 18 }}>
                            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" style={{marginBottom: 8}}>
                                <circle cx="24" cy="24" r="20" fill="#fee2e2"/>
                                <path d="M18 18l12 12m0-12l-12 12" stroke="#ef4444" strokeWidth="3" fill="none" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                        </div>
                        <div style={{ fontSize: 18, marginBottom: 18, color: '#ef4444' }}>
                            ‚ùå C√≥ l·ªói x·∫£y ra!
                        </div>
                        <div style={{ fontSize: 14, color: '#666', marginBottom: 24 }}>
                            {errorMsg}
                        </div>
                        <button
                            onClick={() => setShowErrorModal(false)}
                            style={{
                                background: '#ef4444', color: '#fff', border: 'none', borderRadius: 8,
                                padding: '10px 28px', fontWeight: 700, fontSize: 16, cursor: 'pointer',
                                boxShadow: '0 2px 8px rgba(239,68,68,0.10)', transition: 'background 0.2s',
                            }}
                            onMouseOver={e => e.currentTarget.style.background = '#dc2626'}
                            onMouseOut={e => e.currentTarget.style.background = '#ef4444'}
                        >ƒê√≥ng</button>
                    </div>
                </div>
            )}
        </>
    );
};

export default TicketPage;
