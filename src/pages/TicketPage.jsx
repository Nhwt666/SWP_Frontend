import React, { useState, useEffect } from 'react';
import '../styles/TicketPage.css';

const TicketPage = () => {
    const [category, setCategory] = useState('');
    const [service, setService] = useState('');
    const [customReason, setCustomReason] = useState('');
    const [method, setMethod] = useState('');
    const [address, setAddress] = useState('');
    const [phone, setPhone] = useState('');
    const [email, setEmail] = useState('');
    const [loading, setLoading] = useState(false);
    const [userId, setUserId] = useState(null);

    // D·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë·ªÉ fill t·ª± ƒë·ªông
    const [userInfo, setUserInfo] = useState({
        address: '',
        phone: '',
        email: ''
    });

    const civilServices = [
        'X√°c minh quy·ªÅn th·ª´a k·∫ø',
        'X√°c minh quan h·ªá huy·∫øt th·ªëng',
        'Gi√°m ƒë·ªãnh ADN cho con nu√¥i',
    ];

    const adminServices = [
        'X√°c minh danh t√≠nh',
        'X√°c minh quy·ªÅn l·ª£i b·∫£o hi·ªÉm',
        'X√°c minh quy·ªÅn th·ª´a k·∫ø trong di ch√∫c',
    ];

    // Fetch user info
    useEffect(() => {
        const fetchUserInfo = async () => {
            try {
                const res = await fetch('/auth/me', {
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    }
                });
                if (res.ok) {
                    const data = await res.json();
                    setUserId(data.userId || null);
                    setUserInfo({
                        address: data.address || '',
                        phone: data.phone || '',
                        email: data.email || ''
                    });
                }
            } catch (err) {
                console.error('L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
            }
        };
        fetchUserInfo();
    }, []);

    // Auto-fill khi ch·ªçn "T·ª± g·ª≠i m·∫´u"
    useEffect(() => {
        if (method === 'T·ª± g·ª≠i m·∫´u') {
            setAddress(userInfo.address);
            setPhone(userInfo.phone);
            setEmail(userInfo.email);
        } else {
            setAddress('');
            setPhone('');
            setEmail('');
        }
    }, [method, userInfo]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);

        const typeMap = {
            "D√¢n s·ª±": "CIVIL",
            "H√†nh ch√≠nh": "ADMINISTRATIVE",
            "Kh√°c": "OTHER",
        };

        const methodMap = {
            "T·ª± g·ª≠i m·∫´u": "SELF_TEST",
            "T·∫°i c∆° s·ªü y t·∫ø": "AT_FACILITY",
        };

        const ticketData = {
            type: typeMap[category],
            method: methodMap[method],
            reason: service || customReason,
            address: method === 'T·ª± g·ª≠i m·∫´u' ? address : null,
            phone: method === 'T·ª± g·ª≠i m·∫´u' ? phone : null,
            email: method === 'T·ª± g·ª≠i m·∫´u' ? email : null,
            customerId: userId
        };

        try {
            const res = await fetch('/tickets', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(ticketData)
            });

            if (res.ok) {
                const ticket = await res.json();
                let history = JSON.parse(localStorage.getItem('ticketHistory')) || [];
                history.push(ticket.id);
                localStorage.setItem('ticketHistory', JSON.stringify(history));

                alert(`üéâ Ticket ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! ID: ${ticket.id}`);
                resetForm();
            } else {
                const errData = await res.json();
                alert(`‚ùå T·∫°o ticket th·∫•t b·∫°i: ${errData.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
            }
        } catch (err) {
            console.error('L·ªói:', err);
            alert('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server');
        } finally {
            setLoading(false);
        }
    };

    const resetForm = () => {
        setCategory('');
        setService('');
        setCustomReason('');
        setMethod('');
        setAddress('');
        setPhone('');
        setEmail('');
    };

    return (
        <div className="ticket-page">
            <h2>T·∫°o ƒê∆°n Y√™u C·∫ßu X√©t Nghi·ªám</h2>
            <form onSubmit={handleSubmit}>
                <label>Ch·ªçn lo·∫°i y√™u c·∫ßu:</label>
                <select value={category} onChange={(e) => { setCategory(e.target.value); setService(''); setCustomReason(''); }} required>
                    <option value="">-- Ch·ªçn --</option>
                    <option value="D√¢n s·ª±">D√¢n s·ª±</option>
                    <option value="H√†nh ch√≠nh">H√†nh ch√≠nh</option>
                    <option value="Kh√°c">Y√™u c·∫ßu kh√°c</option>
                </select>

                {(category === 'D√¢n s·ª±' || category === 'H√†nh ch√≠nh') && (
                    <>
                        <label>Ch·ªçn d·ªãch v·ª•:</label>
                        <select value={service} onChange={(e) => setService(e.target.value)} required>
                            <option value="">-- Ch·ªçn d·ªãch v·ª• --</option>
                            {(category === 'D√¢n s·ª±' ? civilServices : adminServices).map((srv, idx) => (
                                <option key={idx} value={srv}>{srv}</option>
                            ))}
                        </select>
                    </>
                )}

                {category === 'Kh√°c' && (
                    <>
                        <label>L√Ω do c·∫ßn x√©t nghi·ªám:</label>
                        <textarea value={customReason} onChange={(e) => setCustomReason(e.target.value)} rows="4" placeholder="Nh·∫≠p l√Ω do c·ª• th·ªÉ..." required />
                    </>
                )}

                <label>Ph∆∞∆°ng th·ª©c x√©t nghi·ªám:</label>
                <select value={method} onChange={(e) => setMethod(e.target.value)} required>
                    <option value="">-- Ch·ªçn ph∆∞∆°ng th·ª©c --</option>
                    <option value="T·ª± g·ª≠i m·∫´u">T·ª± g·ª≠i m·∫´u</option>
                    <option value="T·∫°i c∆° s·ªü y t·∫ø">T·∫°i c∆° s·ªü y t·∫ø</option>
                </select>

                {method === 'T·ª± g·ª≠i m·∫´u' && (
                    <>
                        <label>ƒê·ªãa ch·ªâ nh·∫≠n m·∫´u:</label>
                        <input type="text" value={address} onChange={(e) => setAddress(e.target.value)} required />
                        <label>S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá:</label>
                        <input type="tel" value={phone} onChange={(e) => setPhone(e.target.value)} required />
                        <label>Email li√™n h·ªá:</label>
                        <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
                    </>
                )}

                <button type="submit" className="submit-btn" disabled={loading}>
                    {loading ? 'ƒêang t·∫°o...' : 'T·∫°o ƒê∆°n'}
                </button>
            </form>
        </div>
    );
};

export default TicketPage;
