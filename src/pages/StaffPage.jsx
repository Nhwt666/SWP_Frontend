import { vfs } from '../fonts/RobotoVFS.js';
import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import StaffLayout from '../components/StaffLayout';
import '../styles/StaffPage.css';
import { toast } from 'react-toastify';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';

// ƒêƒÉng k√Ω fonts m·∫∑c ƒë·ªãnh tr∆∞·ªõc
pdfMake.vfs = pdfFonts.pdfMake ? pdfFonts.pdfMake.vfs : pdfFonts.vfs;

// Sau ƒë√≥ merge v·ªõi font Roboto Vi·ªát h√≥a
pdfMake.vfs = { ...pdfMake.vfs, ...vfs };

// ƒêƒÉng k√Ω font Roboto
pdfMake.fonts = {
    Roboto: {
        normal: 'Roboto-Regular.ttf',
        bold: 'Roboto-Regular.ttf',
        italics: 'Roboto-Regular.ttf',
        bolditalics: 'Roboto-Regular.ttf'
    }
};

const API_BASE = '';

const tabOptions = [
    { key: 'unassigned', label: 'Ch·ªù nh·∫≠n', endpoint: '/tickets/unassigned' },
    { key: 'inprogress', label: 'ƒêang nh·∫≠n', endpoint: '/tickets/status/IN_PROGRESS' },
    { key: 'completed', label: 'ƒê√£ ho√†n th√†nh', endpoint: '/tickets/status/COMPLETED' },
];

const StaffPage = () => {
    const [tickets, setTickets] = useState([]);
    const [selectedTicket, setSelectedTicket] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [statusLoading, setStatusLoading] = useState(false);
    const navigate = useNavigate();
    const [search, setSearch] = useState('');
    const [resultOption, setResultOption] = useState('');

    const [activeTab, setActiveTab] = useState('unassigned');
    const [isModalOpen, setIsModalOpen] = useState(false);

    const fetchTickets = useCallback(async (tabKey) => {
        setLoading(true);
        setError('');
        try {
            const tab = tabOptions.find(t => t.key === tabKey);
            const res = await fetch(tab.endpoint, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem('token')}`,
                },
            });
            if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu.');
            let data = await res.json();
            data = data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            setTickets(data);
        } catch (err) {
            setError(err.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        if (!isModalOpen) {
            fetchTickets(activeTab);
        }
    }, [activeTab, fetchTickets, isModalOpen]);

    const handleOpenModal = (ticket) => {
        setSelectedTicket(ticket);
        setIsModalOpen(true);
        setResultOption('');
    };

    const handleCloseModal = () => {
        setIsModalOpen(false);
        setSelectedTicket(null);
    };

    const handleAssignSelf = async (id) => {
        setStatusLoading(true);
        try {
            const res = await fetch(`${API_BASE}/tickets/${id}/assign`, {
                method: 'PUT',
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
            });
            if (!res.ok) throw new Error('Kh√¥ng th·ªÉ nh·∫≠n y√™u c·∫ßu.');
            const statusRes = await fetch(`${API_BASE}/tickets/${id}/status?status=IN_PROGRESS`, {
                method: 'PUT',
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
            });
            if (!statusRes.ok) throw new Error('Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i.');
            const updated = await statusRes.json();
            setTickets((prev) => prev.map(t => t.id === id ? updated : t));
            toast.success('ƒê√£ nh·∫≠n x·ª≠ l√Ω y√™u c·∫ßu v√† chuy·ªÉn sang ƒêang x·ª≠ l√Ω!');
            fetchTickets(activeTab);
            handleCloseModal();
        } catch (err) {
            toast.error(err.message || 'L·ªói khi nh·∫≠n y√™u c·∫ßu');
        } finally {
            setStatusLoading(false);
        }
    };

    const getDisplayResult = (resultStr) => {
        if (!resultStr) return 'Ch∆∞a c√≥ th√¥ng tin k·∫øt qu·∫£.';
        try {
            const parsed = JSON.parse(resultStr);
            if (parsed && typeof parsed === 'object' && parsed.result) {
                return parsed.result;
            }
            return parsed.replace(/^(‚úÖ|‚ùå)\s*K·∫øt qu·∫£:\s*\n?/, '');
        } catch (e) {
            return resultStr.replace(/^(‚úÖ|‚ùå)\s*K·∫øt qu·∫£:\s*\n?/, '');
        }
    };

    const ResultDisplay = ({ resultString }) => {
        if (!resultString) {
            return (
                <div className="result-display-box">
                    <div className="result-header">
                        <h4>K·∫øt qu·∫£ x√©t nghi·ªám</h4>
                    </div>
                    <div className="result-content">
                        <p className="no-result">Ch∆∞a c√≥ th√¥ng tin k·∫øt qu·∫£.</p>
                    </div>
                </div>
            );
        }

        const result = getDisplayResult(resultString);
        const lines = result.split('\n');
        
        // Ph√¢n t√≠ch k·∫øt qu·∫£ ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i
        const isPositive = result.includes('C√≥ quan h·ªá huy·∫øt th·ªëng') || result.includes('tr√πng kh·ªõp');
        const isNegative = result.includes('Kh√¥ng c√≥ quan h·ªá huy·∫øt th·ªëng') || result.includes('kh√¥ng tr√πng kh·ªõp');
        
        // Tr√≠ch xu·∫•t th√¥ng tin
        const conclusion = lines[0] || '';
        const probability = lines.find(line => line.includes('T·ªâ l·ªá x√°c su·∫•t:')) || '';
        const purpose = lines.find(line => line.includes('L√Ω do x√©t nghi·ªám:')) || '';

        return (
            <div className="result-display-box">
                <div className="result-header">
                    <h4>K·∫øt qu·∫£ x√©t nghi·ªám</h4>
                    <div className={`result-status ${isPositive ? 'positive' : isNegative ? 'negative' : 'neutral'}`}>
                        {isPositive ? '‚úÖ Tr√πng kh·ªõp' : isNegative ? '‚ùå Kh√¥ng tr√πng kh·ªõp' : 'üìã K·∫øt qu·∫£'}
                    </div>
                </div>
                
                <div className="result-content">
                    <div className="result-card conclusion">
                        <div className="result-card-header">
                            <span className="result-icon">üéØ</span>
                            <span className="result-label">K·∫øt lu·∫≠n</span>
                        </div>
                        <div className="result-value">
                            {conclusion.replace(/^[‚úîÔ∏è‚úñÔ∏è]\s*/, '')}
                        </div>
                    </div>
                    
                    {probability && (
                        <div className="result-card probability">
                            <div className="result-card-header">
                                <span className="result-icon">üìä</span>
                                <span className="result-label">T·ªâ l·ªá x√°c su·∫•t</span>
                            </div>
                            <div className="result-value">
                                {probability.replace('T·ªâ l·ªá x√°c su·∫•t:', '').trim()}
                            </div>
                        </div>
                    )}
                    
                    {purpose && (
                        <div className="result-card purpose">
                            <div className="result-card-header">
                                <span className="result-icon">üìã</span>
                                <span className="result-label">M·ª•c ƒë√≠ch x√©t nghi·ªám</span>
                            </div>
                            <div className="result-value">
                                {purpose.replace('L√Ω do x√©t nghi·ªám:', '').trim()}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const generateDetailedResult = (ticket, resultOption) => {
        if (resultOption === 'Th√¥ng tin tr√πng kh·ªõp') {
            const sample1Name = ticket.sample1Name || 'M·∫´u 1';
            const sample2Name = ticket.sample2Name || 'M·∫´u 2';
            const customReason = ticket.reason || '';
            const type = ticket.type || '';
            const reason = ticket.reason || '';
            let probability = '99.99990%';
            let testPurpose = `${customReason} gi·ªØa ${sample1Name} v√† ${sample2Name}.`;

            if (type === 'D√¢n s·ª±' && reason.includes('th·ª´a k·∫ø')) {
                probability = '99.99991%';
                testPurpose = `Th·ª´a k·∫ø t√†i s·∫£n theo lu·∫≠t d√¢n s·ª± gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'D√¢n s·ª±' && (reason.includes('quan h·ªá') || reason.includes('huy·∫øt th·ªëng'))) {
                probability = '99.99987%';
                testPurpose = `X√°c minh quan h·ªá cha/con ho·∫∑c m·∫π/con gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'D√¢n s·ª±' && reason.includes('con nu√¥i')) {
                probability = '99.99987%';
                testPurpose = `X√°c minh con nu√¥i gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'H√†nh ch√≠nh' && reason.includes('danh t√≠nh')) {
                probability = '99.99972%';
                testPurpose = `H·ªó tr·ª£ x√°c minh danh t√≠nh h·ª£p l·ªá trong h·ªì s∆° h√†nh ch√≠nh gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'H√†nh ch√≠nh' && reason.includes('b·∫£o hi·ªÉm')) {
                probability = '99.99995%';
                testPurpose = `Cung c·∫•p b·∫±ng ch·ª©ng h·ª£p l·ªá cho quy·ªÅn l·ª£i b·∫£o hi·ªÉm gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'H√†nh ch√≠nh' && reason.includes('di ch√∫c')) {
                probability = '99.99989%';
                testPurpose = `Ki·ªÉm tra ADN ph·ª•c v·ª• ch·ª©ng th·ª±c di ch√∫c gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            } else if (type === 'Kh√°c') {
                probability = '99.99985%';
                testPurpose = `${customReason} ‚Äî gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
            }
            
            return `‚úîÔ∏è C√≥ quan h·ªá huy·∫øt th·ªëng (x√°c su·∫•t ‚â• 99.99%)\nT·ªâ l·ªá x√°c su·∫•t: ${probability}\nL√Ω do x√©t nghi·ªám: ${testPurpose}`;
        } else if (resultOption === 'Th√¥ng tin kh√¥ng tr√πng kh·ªõp') {
            const sample1Name = ticket.sample1Name || 'M·∫´u 1';
            const sample2Name = ticket.sample2Name || 'M·∫´u 2';
            const customReason = ticket.reason || '';
            return `‚úñÔ∏è Kh√¥ng c√≥ quan h·ªá huy·∫øt th·ªëng (x√°c su·∫•t < 0.01%)\nT·ªâ l·ªá x√°c su·∫•t: 0.00001%\nL√Ω do x√©t nghi·ªám: ${customReason} gi·ªØa ${sample1Name} v√† ${sample2Name}.`;
        }
        return resultOption;
    };

    const handleCompleteTicket = async (id, result) => {
        if (!result) {
            toast.error('Vui l√≤ng ch·ªçn k·∫øt qu·∫£ x·ª≠ l√Ω.');
            return;
        }
        setStatusLoading(true);
        try {
            const ticket = tickets.find(t => t.id === id);
            if (!ticket) throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ticket.');
            
            const detailedResult = generateDetailedResult(ticket, result);
            
            const res = await fetch(`${API_BASE}/tickets/${id}/complete`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${localStorage.getItem('token')}` },
                body: JSON.stringify(detailedResult),
            });
            if (!res.ok) throw new Error('Kh√¥ng th·ªÉ ho√†n th√†nh ticket.');
            const updated = await res.json();
            setTickets((prev) => prev.map(t => (t.id === id ? updated : t)));
            toast.success('ƒê√£ ho√†n th√†nh v√† l∆∞u k·∫øt qu·∫£!');
            setResultOption('');
            fetchTickets(activeTab);
            handleCloseModal();
        } catch (err) {
            toast.error(err.message || 'L·ªói khi ho√†n th√†nh ticket.');
        } finally {
            setStatusLoading(false);
        }
    };
    
    const filteredTickets = tickets.filter(ticket => {
        if (!search.trim()) return true;
        const idMatch = ticket.id?.toString().includes(search.trim());
        const name = ticket.customer?.fullName || ticket.customer?.name || '';
        const nameMatch = name.toLowerCase().includes(search.trim().toLowerCase());
        return idMatch || nameMatch;
    });

    const methodMap = { SELF_TEST: 'T·ª± g·ª≠i m·∫´u', AT_FACILITY: 'T·∫°i c∆° s·ªü y t·∫ø' };

    // Mappings for request type display and service names
    const typeDisplayMap = {
        'CIVIL': 'D√¢n s·ª±',
        'ADMINISTRATIVE': 'H√†nh ch√≠nh',
        'OTHER': 'Kh√°c'
    };
    const typeServiceMap = {
        'CIVIL': 'X√°c minh quy·ªÅn th·ª´a k·∫ø',
        'ADMINISTRATIVE': 'X√°c minh danh t√≠nh',
        'OTHER': 'Y√™u c·∫ßu kh√°c',
    };

    const generatePDFReport = async (ticket) => {
        try {
            const type = ticket.type;
            const method = methodMap[ticket.method] || ticket.method;
            const customerName = ticket.customer?.fullName || ticket.customer?.name;
            const phone = ticket.customer?.phone;
            const email = ticket.customer?.email;
            const result = getDisplayResult(ticket.resultString);
            const reason = ticket.reason || 'N/A';
            const sample1Name = ticket.sample1Name || 'M·∫´u 1';
            const sample2Name = ticket.sample2Name || 'M·∫´u 2';
            const address = ticket.address || 'N/A';
            const appointmentDate = ticket.appointmentDate ? new Date(ticket.appointmentDate).toLocaleDateString('vi-VN') : 'N/A';
            const customerCode = `KH${ticket.id.toString().padStart(6, '0')}`;
            
            const resultLower = result ? result.toLowerCase() : '';
            const isMatch = resultLower && (
                resultLower.includes('tr√πng kh·ªõp') || 
                resultLower.includes('c√≥ quan h·ªá huy·∫øt th·ªëng') ||
                (resultLower.includes('x√°c su·∫•t') && resultLower.includes('99.99')) ||
                resultLower.includes('99.99%') ||
                resultLower.includes('99.999%')
            );
            const conclusionText = isMatch ? 'TR√ôNG KH·ªöP' : 'KH√îNG TR√ôNG KH·ªöP';
            const conclusionColor = isMatch ? '#2e7d32' : '#d32f2f';

            const displayType = typeDisplayMap[type] || type;

            const docDefinition = {
                pageSize: 'A4',
                pageMargins: [40, 60, 40, 60],
                header: {
                    stack: [
                        { text: 'TRUNG T√ÇM X√âT NGHI·ªÜM ADN', style: 'mainHeader' },
                        { text: 'PHI·∫æU TR·∫¢ K·∫æT QU·∫¢ X√âT NGHI·ªÜM ADN', style: 'subHeader' }
                    ],
                    margin: [0, 20, 0, 0]
                },
                content: [
                    {
                        text: [
                            'S·ªë Hotline: 1800.9999\n',
                            'Email: trungtamxetnghiem@gmail.com\n',
                            'ƒê·ªãa ch·ªâ: 643 ƒêi·ªán Bi√™n Ph·ªß, Ph∆∞·ªùng 1, Qu·∫≠n 3, TPHCM'
                        ],
                        style: 'centerInfo',
                        alignment: 'center',
                        margin: [0, 0, 0, 30]
                    },
                    {
                        table: {
                            widths: ['*', '*'],
                            body: [
                                [
                                    {
                                        text: [
                                            { text: 'TH√îNG TIN PHI·∫æU\n', style: 'sectionHeader' },
                                            { text: `M√£ phi·∫øu: ${ticket.id}\n`, style: 'infoText' },
                                            { text: `M√£ kh√°ch h√†ng: ${customerCode}\n`, style: 'infoText' },
                                            { text: `Ng√†y g·ª≠i m·∫´u: ${ticket.createdAt ? new Date(ticket.createdAt).toLocaleDateString('vi-VN') : 'N/A'}\n`, style: 'infoText' },
                                            { text: `Ng√†y tr·∫£ k·∫øt qu·∫£: ${new Date().toLocaleDateString('vi-VN')}`, style: 'infoText' }
                                        ]
                                    },
                                    {
                                        text: [
                                            { text: 'TH√îNG TIN KH√ÅCH H√ÄNG\n', style: 'sectionHeader' },
                                            { text: `H·ªç v√† t√™n: ${customerName || 'N/A'}\n`, style: 'infoText' },
                                            { text: `S·ªë ƒëi·ªán tho·∫°i: ${phone || 'N/A'}\n`, style: 'infoText' },
                                            { text: `Email: ${email || 'N/A'}`, style: 'infoText' }
                                        ]
                                    }
                                ]
                            ]
                        },
                        layout: 'noBorders',
                        margin: [0, 0, 0, 25]
                    },
                    { text: 'TH√îNG TIN X√âT NGHI·ªÜM', style: 'sectionHeader', margin: [0, 0, 0, 10] },
                    {
                        table: {
                            widths: ['*'],
                            body: [
                                [
                                    {
                                        text: [
                                            { text: `Lo·∫°i x√©t nghi·ªám: ${typeServiceMap[type] || typeDisplayMap[type] || type}\n`, style: 'infoText' },
                                            { text: `L√Ω do x√©t nghi·ªám: ${reason}\n`, style: 'infoText' },
                                            { text: `Ph∆∞∆°ng th·ª©c nh·∫≠n m·∫´u: ${method}\n`, style: 'infoText' },
                                            { text: `T√™n m·∫´u 1: ${sample1Name}\n`, style: 'infoText' },
                                            { text: `T√™n m·∫´u 2: ${sample2Name}\n`, style: 'infoText' },
                                            ...(method === 'T·∫°i c∆° s·ªü y t·∫ø' ? [{ text: `Ng√†y h·∫πn: ${appointmentDate}\n`, style: 'infoText' }] : []),
                                            ...(method === 'T·ª± g·ª≠i m·∫´u' ? [{ text: `ƒê·ªãa ch·ªâ g·ª≠i m·∫´u: ${address}`, style: 'infoText' }] : [])
                                        ].filter(Boolean)
                                    }
                                ]
                            ]
                        },
                        layout: 'noBorders',
                        margin: [0, 0, 0, 25]
                    },
                    { text: 'K·∫æT QU·∫¢ X√âT NGHI·ªÜM', style: 'sectionHeader', margin: [0, 0, 0, 15] },
                    {
                        table: {
                            widths: ['*'],
                            body: [
                                [
                                    {
                                        text: [
                                            { text: 'K·∫øt qu·∫£: ', style: 'resultLabel' },
                                            { text: conclusionText, color: conclusionColor, style: 'resultValue' },
                                            { text: '\n' + result.replace(/\\n/g, '\n'), style: 'resultDetails' }
                                        ],
                                        style: 'resultCell'
                                    }
                                ]
                            ]
                        },
                        layout: {
                            hLineWidth: function() { return 0; },
                            vLineWidth: function() { return 0; },
                            fillColor: function() { return '#f8f9fa'; }
                        },
                        margin: [0, 0, 0, 30]
                    },
                    { text: 'CH·ªÆ K√ù X√ÅC NH·∫¨N', style: 'sectionHeader', margin: [0, 0, 0, 15] },
                    {
                        table: {
                            widths: ['*', '*', 120],
                            body: [
                                [
                                    {
                                        text: [
                                            { text: 'Ng∆∞·ªùi th·ª±c hi·ªán x√©t nghi·ªám:\n', style: 'signatureLabel' },
                                            { text: '\n\n_________________\n', style: 'signatureLine' },
                                            { text: '(K√Ω v√† ghi r√µ h·ªç t√™n)', style: 'signatureNote' }
                                        ],
                                        alignment: 'center'
                                    },
                                    {
                                        text: [
                                            { text: 'Ng∆∞·ªùi duy·ªát k·∫øt qu·∫£:\n', style: 'signatureLabel' },
                                            { text: '\n\n_________________\n', style: 'signatureLine' },
                                            { text: '(K√Ω v√† ghi r√µ h·ªç t√™n)', style: 'signatureNote' }
                                        ],
                                        alignment: 'center'
                                    },
                                    {
                                        text: [
                                            { text: 'ƒê√ìNG D·∫§U', style: 'stampText' },
                                            { text: 'TRUNG T√ÇM', style: 'stampText' }
                                        ],
                                        alignment: 'center',
                                        style: 'stampCell'
                                    }
                                ]
                            ]
                        },
                        layout: 'noBorders',
                        margin: [0, 0, 0, 30]
                    },
                    { text: 'GHI CH√ö QUAN TR·ªåNG', style: 'sectionHeader', margin: [0, 0, 0, 10] },
                    {
                        table: {
                            widths: ['*'],
                            body: [
                                [
                                    {
                                        text: [
                                            { text: '‚Ä¢ VƒÉn b·∫£n n√†y ch·ªâ c√≥ hi·ªáu l·ª±c khi c√≥ d·∫•u x√°c nh·∫≠n c·ªßa trung t√¢m\n', style: 'noteText' },
                                            { text: '‚Ä¢ K·∫øt qu·∫£ x√©t nghi·ªám c√≥ hi·ªáu l·ª±c trong v√≤ng 30 ng√†y k·ªÉ t·ª´ ng√†y tr·∫£ k·∫øt qu·∫£\n', style: 'noteText' },
                                            { text: '‚Ä¢ M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá trung t√¢m qua s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email tr√™n\n', style: 'noteText' },
                                            { text: '‚Ä¢ Trung t√¢m kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ vi·ªác s·ª≠ d·ª•ng k·∫øt qu·∫£ cho m·ª•c ƒë√≠ch kh√°c', style: 'noteText' }
                                        ]
                                    }
                                ]
                            ]
                        },
                        layout: 'noBorders',
                        margin: [0, 0, 0, 20]
                    }
                ],
                styles: {
                    mainHeader: { 
                        fontSize: 18, 
                        bold: true, 
                        color: '#1a237e', 
                        alignment: 'center',
                        margin: [0, 0, 0, 5]
                    },
                    subHeader: { 
                        fontSize: 14, 
                        bold: true, 
                        color: '#333333', 
                        alignment: 'center',
                        margin: [0, 0, 0, 0]
                    },
                    centerInfo: { 
                        fontSize: 9, 
                        color: '#666666', 
                        lineHeight: 1.3 
                    },
                    sectionHeader: { 
                        fontSize: 12, 
                        bold: true, 
                        color: '#1a237e', 
                        margin: [0, 0, 0, 8],
                        decoration: 'underline',
                        decorationStyle: 'solid',
                        decorationColor: '#1a237e'
                    },
                    infoText: { 
                        fontSize: 10, 
                        lineHeight: 1.4, 
                        color: '#333333',
                        margin: [0, 2, 0, 2]
                    },
                    resultLabel: { 
                        fontSize: 11, 
                        bold: true, 
                        color: '#333333' 
                    },
                    resultValue: { 
                        fontSize: 12, 
                        bold: true 
                    },
                    resultDetails: { 
                        fontSize: 10, 
                        lineHeight: 1.5, 
                        color: '#333333',
                        margin: [0, 5, 0, 0]
                    },
                    resultCell: { 
                        padding: [15, 10, 15, 10]
                    },
                    signatureLabel: { 
                        fontSize: 10, 
                        bold: true, 
                        color: '#333333' 
                    },
                    signatureLine: { 
                        fontSize: 12, 
                        color: '#333333' 
                    },
                    signatureNote: { 
                        fontSize: 8, 
                        color: '#666666',
                        italics: true
                    },
                    stampText: { 
                        fontSize: 9, 
                        bold: true, 
                        color: '#666666',
                        margin: [0, 2, 0, 2]
                    },
                    stampCell: { 
                        padding: [10, 5, 10, 5],
                        fillColor: '#f8f9fa'
                    },
                    noteText: { 
                        fontSize: 9, 
                        lineHeight: 1.3, 
                        color: '#666666',
                        margin: [0, 2, 0, 2]
                    }
                },
                defaultStyle: { font: 'Roboto' }
            };
            pdfMake.createPdf(docDefinition).download(`ket-qua-xet-nghiem-ADN-${ticket.id}.pdf`);
            toast.success('ƒê√£ t·∫£i PDF k·∫øt qu·∫£ x√©t nghi·ªám!');
        } catch (error) {
            console.error('L·ªói khi t·∫°o PDF:', error);
            toast.error('L·ªói khi t·∫°o PDF k·∫øt qu·∫£ x√©t nghi·ªám');
        }
    };

    return (
        <StaffLayout>
            <div className="staff-page">
                <h2 className="staff-title-modern">Qu·∫£n l√Ω Y√™u C·∫ßu (Staff)</h2>
                <div className="modern-tabs-row">
                    {tabOptions.map(tab => (
                        <button
                            key={tab.key}
                            className={`modern-tab-btn${activeTab === tab.key ? ' active' : ''}`}
                            onClick={() => setActiveTab(tab.key)}
                        >
                            {tab.label}
                        </button>
                    ))}
                    <input
                        type="text"
                        className="modern-search-input"
                        placeholder="T√¨m theo ID ho·∫∑c t√™n kh√°ch h√†ng..."
                        value={search}
                        onChange={e => setSearch(e.target.value)}
                    />
                </div>
                {loading ? (
                    <div className="staff-spinner"><div className="spinner"></div></div>
                ) : error ? (
                    <p style={{ color: 'red' }}>{error}</p>
                ) : (
                    <div className="ticket-list-modern fade-in">
                        <table className="modern-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Kh√°ch h√†ng</th>
                                    <th>Lo·∫°i y√™u c·∫ßu</th>
                                    <th>Tr·∫°ng th√°i</th>
                                    <th>H√†nh ƒë·ªông</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredTickets.length === 0 ? (
                                    <tr>
                                        <td colSpan="5" className="ticket-empty-modern">Kh√¥ng c√≥ y√™u c·∫ßu n√†o ph√π h·ª£p.</td>
                                    </tr>
                                ) : (
                                    filteredTickets.map((ticket) => (
                                        <tr key={ticket.id}>
                                            <td>#{ticket.id}</td>
                                            <td>{ticket.customer?.fullName || ticket.customer?.name || 'N/A'}</td>
                                            <td>{typeServiceMap[ticket.type] || typeDisplayMap[ticket.type] || ticket.type}</td>
                                            <td>
                                                <span className={`ticket-status-badge-list status-${ticket.status.toLowerCase()}`}>
                                                    {(() => {
                                                        switch(ticket.status) {
                                                            case 'PENDING': return 'Ch·ªù x·ª≠ l√Ω';
                                                            case 'IN_PROGRESS': return 'ƒêang x·ª≠ l√Ω';
                                                            case 'COMPLETED': return 'ƒê√£ ho√†n th√†nh';
                                                            default: return ticket.status;
                                                        }
                                                    })()}
                                                </span>
                                            </td>
                                            <td>
                                                <button className="btn-details" onClick={() => handleOpenModal(ticket)}>
                                                    {activeTab === 'completed' ? 'Xem chi ti·∫øt' : 'X·ª≠ l√Ω'}
                                                </button>
                                            </td>
                                        </tr>
                                    ))
                                )}
                            </tbody>
                        </table>
                    </div>
                )}
                
                {isModalOpen && selectedTicket && (
                    <div className="modal-overlay" onClick={handleCloseModal}>
                        <div className="modal-content" onClick={e => e.stopPropagation()}>
                            <button className="modal-close-btn" onClick={handleCloseModal}>&times;</button>
                            <div className="ticket-detail modern-card">
                                <h3 className="ticket-detail-title">Chi ti·∫øt Ticket #{selectedTicket.id}</h3>
                                <div className="ticket-status-row">
                                    <span className={`ticket-status-badge status-${selectedTicket.status.toLowerCase()}`}>
                                        {(() => {
                                            switch(selectedTicket.status) {
                                                case 'PENDING': return 'Ch·ªù x·ª≠ l√Ω';
                                                case 'IN_PROGRESS': return 'ƒêang x·ª≠ l√Ω';
                                                case 'COMPLETED': return 'ƒê√£ ho√†n th√†nh';
                                                default: return selectedTicket.status;
                                            }
                                        })()}
                                    </span>
                                </div>
                                <div className="ticket-info-grid">
                                    <div><strong>Kh√°ch h√†ng:</strong> <span>{selectedTicket.customer?.fullName || selectedTicket.customer?.name || ''}</span></div>
                                    <div><strong>Email:</strong> <span>{selectedTicket.customer?.email || ''}</span></div>
                                    <div><strong>SƒêT:</strong> <span>{selectedTicket.customer?.phone || ''}</span></div>
                                    <div><strong>Ph∆∞∆°ng th·ª©c:</strong> <span>{methodMap[selectedTicket.method] || selectedTicket.method}</span></div>
                                    <div><strong>L√Ω do:</strong> <span>{selectedTicket.reason || ''}</span></div>
                                    <div><strong>Th·ªùi gian t·∫°o:</strong> <span>{selectedTicket.createdAt ? new Date(selectedTicket.createdAt).toLocaleString('vi-VN') : 'Kh√¥ng c√≥ th√¥ng tin'}</span></div>
                                    {selectedTicket.appointmentDate &&
                                        <div><strong>Ng√†y h·∫πn:</strong> <span>{new Date(selectedTicket.appointmentDate).toLocaleDateString('vi-VN')}</span></div>
                                    }
                                    {selectedTicket.address &&
                                        <div><strong>ƒê·ªãa ch·ªâ g·ª≠i m·∫´u:</strong> <span>{selectedTicket.address}</span></div>
                                    }
                                    <div><strong>T√™n M·∫´u 1:</strong> <span>{selectedTicket.sample1Name || ''}</span></div>
                                    <div><strong>T√™n M·∫´u 2:</strong> <span>{selectedTicket.sample2Name || ''}</span></div>
                                </div>

                                {selectedTicket.status === 'PENDING' && selectedTicket.staff == null && (
                                    <div style={{ margin: '24px 0 0 0', textAlign: 'center' }}>
                                        <button
                                            className="btn-processing modern-btn"
                                            onClick={() => handleAssignSelf(selectedTicket.id)}
                                            disabled={statusLoading}
                                        >
                                            Nh·∫≠n x·ª≠ l√Ω
                                        </button>
                                    </div>
                                )}
                                {selectedTicket.status === 'IN_PROGRESS' && (
                                    <div style={{ margin: '24px 0 0 0', textAlign: 'center' }}>
                                        <label style={{ marginRight: 10, fontWeight: 600, fontSize: 16 }}>K·∫øt qu·∫£ x·ª≠ l√Ω:</label>
                                        <select
                                            value={resultOption}
                                            onChange={e => setResultOption(e.target.value)}
                                            className="modern-select"
                                        >
                                            <option value="">-- Ch·ªçn k·∫øt qu·∫£ --</option>
                                            <option value="Th√¥ng tin tr√πng kh·ªõp">Th√¥ng tin tr√πng kh·ªõp</option>
                                            <option value="Th√¥ng tin kh√¥ng tr√πng kh·ªõp">Th√¥ng tin kh√¥ng tr√πng kh·ªõp</option>
                                        </select>
                                        {resultOption && (
                                            <>
                                                <p style={{ marginTop: 12, fontStyle: 'italic', color: '#1976d2', fontSize: 15 }}>
                                                    K·∫øt lu·∫≠n: {resultOption}.
                                                </p>
                                                <button
                                                    className="btn-complete modern-btn"
                                                    style={{ marginTop: 16 }}
                                                    onClick={() => handleCompleteTicket(selectedTicket.id, resultOption)}
                                                    disabled={statusLoading || !resultOption}
                                                >
                                                    X√°c nh·∫≠n Ho√†n th√†nh
                                                </button>
                                            </>
                                        )}
                                    </div>
                                )}
                                {selectedTicket.status === 'COMPLETED' && (
                                    <div className="result-display-box">
                                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                                            <h4>K·∫øt qu·∫£ x·ª≠ l√Ω</h4>
                                            <button
                                                onClick={() => generatePDFReport(selectedTicket)}
                                                className="pdf-download-btn"
                                            >
                                                üìÑ T·∫£i PDF
                                            </button>
                                        </div>
                                        <ResultDisplay resultString={selectedTicket.resultString} />
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </StaffLayout>
    );
};

export default StaffPage;
