# Notification System Auto Test Script
# Ch·∫°y file n√†y trong PowerShell ƒë·ªÉ test t·ª± ƒë·ªông

Write-Host "üîî Notification System Auto Test" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Ki·ªÉm tra backend c√≥ ch·∫°y kh√¥ng
Write-Host "`n1Ô∏è‚É£ Ki·ªÉm tra backend..." -ForegroundColor Yellow
try {
    $healthCheck = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -Method GET -TimeoutSec 5
    if ($healthCheck.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend ƒëang ch·∫°y tr√™n port 8080" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Backend kh√¥ng ch·∫°y. H√£y ch·∫°y: ./mvnw spring-boot:run" -ForegroundColor Red
    exit 1
}

# Test API kh√¥ng c√≥ token
Write-Host "`n2Ô∏è‚É£ Test API kh√¥ng c√≥ token..." -ForegroundColor Yellow
try {
    $noTokenResponse = Invoke-WebRequest -Uri "http://localhost:8080/notifications" -Method GET -TimeoutSec 5
    Write-Host "‚ùå API kh√¥ng y√™u c·∫ßu token (kh√¥ng ƒë√∫ng)" -ForegroundColor Red
} catch {
    $errorResponse = $_.Exception.Response
    if ($errorResponse.StatusCode -eq 401) {
        Write-Host "‚úÖ API y√™u c·∫ßu token (ƒë√∫ng)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Unexpected error: $($errorResponse.StatusCode)" -ForegroundColor Yellow
    }
}

# Test v·ªõi token gi·∫£
Write-Host "`n3Ô∏è‚É£ Test v·ªõi token gi·∫£..." -ForegroundColor Yellow
$fakeHeaders = @{
    "Authorization" = "Bearer fake_token_123"
    "Content-Type" = "application/json"
}

try {
    $fakeTokenResponse = Invoke-WebRequest -Uri "http://localhost:8080/notifications" -Method GET -Headers $fakeHeaders -TimeoutSec 5
    Write-Host "‚ùå API ch·∫•p nh·∫≠n token gi·∫£ (kh√¥ng ƒë√∫ng)" -ForegroundColor Red
} catch {
    $errorResponse = $_.Exception.Response
    if ($errorResponse.StatusCode -eq 401) {
        Write-Host "‚úÖ API t·ª´ ch·ªëi token gi·∫£ (ƒë√∫ng)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Unexpected error: $($errorResponse.StatusCode)" -ForegroundColor Yellow
    }
}

# Test t·∫°o notification v·ªõi token gi·∫£
Write-Host "`n4Ô∏è‚É£ Test t·∫°o notification v·ªõi token gi·∫£..." -ForegroundColor Yellow
$testNotification = @{
    message = "Test notification - Ticket #999 ƒë√£ chuy·ªÉn t·ª´ 'Ch·ªù x·ª≠ l√Ω' sang 'ƒêang x·ª≠ l√Ω'"
    type = "INFO"
    ticketId = 999
    statusChange = '{"from": "PENDING", "to": "IN_PROGRESS"}'
} | ConvertTo-Json

try {
    $createResponse = Invoke-WebRequest -Uri "http://localhost:8080/notifications" -Method POST -Body $testNotification -Headers $fakeHeaders -TimeoutSec 5
    Write-Host "‚ùå API cho ph√©p t·∫°o notification v·ªõi token gi·∫£ (kh√¥ng ƒë√∫ng)" -ForegroundColor Red
} catch {
    $errorResponse = $_.Exception.Response
    if ($errorResponse.StatusCode -eq 401) {
        Write-Host "‚úÖ API t·ª´ ch·ªëi t·∫°o notification v·ªõi token gi·∫£ (ƒë√∫ng)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Unexpected error: $($errorResponse.StatusCode)" -ForegroundColor Yellow
    }
}

# Test c√°c endpoint kh√°c
Write-Host "`n5Ô∏è‚É£ Test c√°c endpoint kh√°c..." -ForegroundColor Yellow

$endpoints = @(
    "/notifications/unread-count",
    "/notifications/mark-all-read",
    "/notifications/cleanup-expired"
)

foreach ($endpoint in $endpoints) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8080$endpoint" -Method GET -Headers $fakeHeaders -TimeoutSec 5
        Write-Host "‚ùå $endpoint ch·∫•p nh·∫≠n token gi·∫£" -ForegroundColor Red
    } catch {
        $errorResponse = $_.Exception.Response
        if ($errorResponse.StatusCode -eq 401) {
            Write-Host "‚úÖ $endpoint t·ª´ ch·ªëi token gi·∫£" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $endpoint - Error: $($errorResponse.StatusCode)" -ForegroundColor Yellow
        }
    }
}

# Test database connection
Write-Host "`n6Ô∏è‚É£ Ki·ªÉm tra database..." -ForegroundColor Yellow
try {
    $dbResponse = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -Method GET -TimeoutSec 5
    $healthData = $dbResponse.Content | ConvertFrom-Json
    if ($healthData.status -eq "UP") {
        Write-Host "‚úÖ Database connection OK" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Database c√≥ v·∫•n ƒë·ªÅ: $($healthData.status)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra database" -ForegroundColor Red
}

# Ki·ªÉm tra log backend
Write-Host "`n7Ô∏è‚É£ Ki·ªÉm tra log backend..." -ForegroundColor Yellow
$logFile = "log/backend.log"
if (Test-Path $logFile) {
    $recentLogs = Get-Content $logFile -Tail 10
    $notificationLogs = $recentLogs | Where-Object { $_ -match "notification|Notification" }
    if ($notificationLogs) {
        Write-Host "‚úÖ T√¨m th·∫•y log notification:" -ForegroundColor Green
        $notificationLogs | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
    } else {
        Write-Host "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y log notification g·∫ßn ƒë√¢y" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file log: $logFile" -ForegroundColor Yellow
}

# T√≥m t·∫Øt k·∫øt qu·∫£
Write-Host "`n=================================" -ForegroundColor Cyan
Write-Host "üìä T√ìM T·∫ÆT K·∫æT QU·∫¢ TEST" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host "‚úÖ Backend ƒëang ch·∫°y" -ForegroundColor Green
Write-Host "‚úÖ Security filter ho·∫°t ƒë·ªông" -ForegroundColor Green
Write-Host "‚úÖ API endpoints s·∫µn s√†ng" -ForegroundColor Green
Write-Host "‚úÖ Database connection OK" -ForegroundColor Green

Write-Host "`nüéØ ƒê·ªÉ test ƒë·∫ßy ƒë·ªß v·ªõi token th·∫≠t:" -ForegroundColor Yellow
Write-Host "1. ƒêƒÉng nh·∫≠p v√†o frontend" -ForegroundColor White
Write-Host "2. M·ªü browser console (F12)" -ForegroundColor White
Write-Host "3. Ch·∫°y: testNotificationSystem.runAllTests()" -ForegroundColor White
Write-Host "4. Ho·∫∑c test thay ƒë·ªïi tr·∫°ng th√°i ticket th·ª±c t·∫ø" -ForegroundColor White

Write-Host "`nüöÄ Notification System ƒë√£ s·∫µn s√†ng!" -ForegroundColor Green 